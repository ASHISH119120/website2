import requests

from bs4 import BeautifulSoup
from urllib.parse import urljoin

# === PAYLOADS ===
xss_payload = "<script>alert('XSS')</script>"
sqli_payload = "' OR '1'='1"

headers = {
    "User-Agent": "VulnScanner/1.0"
}

# === FORM PARSER ===
def get_all_forms(url):
    soup = BeautifulSoup(requests.get(url).text, "html.parser")
    return soup.find_all("form")

# === FORM DETAILS EXTRACTOR ===
def get_form_details(form):
    details = {"action": form.get("action"), "method": form.get("method", "get").lower(), "inputs": []}
    for input_tag in form.find_all("input"):
        input_type = input_tag.get("type", "text")
        input_name = input_tag.get("name")
        if input_name:
            details["inputs"].append({"type": input_type, "name": input_name})
    return details

# === SUBMIT FORM ===
def submit_form(form_details, url, payload):
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input in form_details["inputs"]:
        if input["type"] == "text":
            data[input["name"]] = payload
        else:
            data[input["name"]] = "test"

    if form_details["method"] == "post":
        return requests.post(target_url, data=data, headers=headers)
    else:
        return requests.get(target_url, params=data, headers=headers)

# === SCAN FUNCTION ===
def scan_for_vulnerabilities(url):
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} form(s) on {url}")
    
    for i, form in enumerate(forms, start=1):
        form_details = get_form_details(form)
        print(f"\n[Form #{i}] Action: {form_details['action']} | Method: {form_details['method']}")
        
        # Test for XSS
        response = submit_form(form_details, url, xss_payload)
        if xss_payload in response.text:
            print("❗ Possible XSS vulnerability detected!")

        # Test for SQLi
        response = submit_form(form_details, url, sqli_payload)
        errors = ["sql syntax", "mysql_fetch", "ORA-", "syntax error"]
        for error in errors:
            if error.lower() in response.text.lower():
                print("❗ Possible SQL Injection vulnerability detected!")
                break

# === MAIN ===
if __name__ == "__main__":
    target = input("Enter target URL (e.g., http://testphp.vulnweb.com): ").strip()
    scan_for_vulnerabilities(target)
